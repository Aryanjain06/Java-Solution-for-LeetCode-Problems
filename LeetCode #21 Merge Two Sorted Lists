21. Merge Two Sorted Lists


You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.


Example 1:

1--->2--->4

1--->3--->4

1--->1--->2--->3--->4--->4

Input: list1 = [1,2,4], list2 = [1,3,4]

Output: [1,1,2,3,4,4]


Example 2:

Input: list1 = [], list2 = []

Output: []


Example 3:

Input: list1 = [], list2 = [0]

Output: [0]


Constraints:

The number of nodes in both lists is in the range [0, 50].

-100 <= Node.val <= 100

Both list1 and list2 are sorted in non-decreasing order.




SOLUTION------------>



class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {

	// Create a sentinal/dummy node to start

        ListNode returnNode = new ListNode(Integer.MIN_VALUE);

	// Create a copy of this node to iterate while solving the problem

        ListNode headNode = returnNode;

	// Traverse till one of the list reaches the end

        while(list1 != null && list2 != null){ 

	    // Compare the 2 values of lists

            if(list1.val <= list2.val){
                returnNode.next = list1;
                list1 = list1.next;
            }
            else{
                returnNode.next = list2;
                list2 = list2.next;
            }
            returnNode = returnNode.next;
        }

	// Append the remaining list

        if(list1 == null){
            returnNode.next = list2;
        }
        else if(list2 == null){
            returnNode.next = list1;
        }

	// return the next node to sentinal node

        return headNode.next;
    }
}
