206. Reverse Linked List

Given the head of a singly linked list, reverse the list, and return the reversed list.

Example 1:

![image](https://user-images.githubusercontent.com/67059999/178356041-91bd89e2-f76f-4ab6-8d7a-bf1dc9e3e811.png)

Input: head = [1,2,3,4,5]

Output: [5,4,3,2,1]


Example 2:

![image](https://user-images.githubusercontent.com/67059999/178356130-6f8baba9-9bf6-4155-be46-993d09d0105e.png)

Input: head = [1,2]

Output: [2,1]


Example 3:

Input: head = []

Output: []



Constraints:

The number of nodes in the list is the range [0, 5000].

-5000 <= Node.val <= 5000
 

Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?





SOLUTION-------------------->



class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null) {
        return null;
    }
    if (head.next == null) {
        return head;
    }
    ListNode node = reverseList(head.next);
    head.next.next=head;
    head.next=null;
    return node;
    }
}
